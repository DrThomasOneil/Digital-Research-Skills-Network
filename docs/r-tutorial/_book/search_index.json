[["index.html", "Introduction to R and analytic Programming Welcome!", " Introduction to R and analytic Programming Yuchen Li &amp; Thomas O’Neil 2024-12-23 (Last update: 2025-01-24) Welcome! This is the sub-repository containing the tutorials and workshop notes for the introduction to R and analytic programming. Get started → "],["chapter-2-data-types-and-structures.html", "Chapter 2: Data Types and Structures Data Types Data Structures Importing and saving files in R", " Chapter 2: Data Types and Structures Goals: Learn about data types and structures in R.   • Basic data types: numeric, character, logical.   • Data structures: vectors, matrices, data frames, lists.   • Assessing and querying data types and structures.   • Importing data (RDS, Excel, CSV files). Read time: 15 Minutes Data Types There are a few data types you should know: character: In R, characters or strings are letters, words, sentences, numbers, symbols… They’re defined using quotation marks. numeric: Data can be stored as a number. R recognises numbers without the quotation marks logical: TRUE / FALSE / T / F / 1 / 0. Logicals are an important data type that you’ll notice along the way. Some functions or operations require data to the correct data type. For example, math can’t be performed on a character Code # character char = &quot;Hello World&quot; typeof(char) ## [1] &quot;character&quot; Code # numeric num = &quot;1&quot; typeof(num) # 1 is in quotes - so classified as a char ## [1] &quot;character&quot; Code num = 1 typeof(num) # without the quotes ## [1] &quot;double&quot; Code # logical log = TRUE typeof(log) ## [1] &quot;logical&quot; To demonstrate a logical, a good example of their use is to check a condition and run a script. I’ll use if here, which we cover in the next chapter. Examples: Code # TRUE run_script = TRUE if(run_script) { print(paste0(&quot;run_script is &quot;, run_script)) } ## [1] &quot;run_script is TRUE&quot; Code run_script = T if(run_script) { print(paste0(&quot;run_script is &quot;, run_script)) } ## [1] &quot;run_script is TRUE&quot; Code run_script = 1 if(run_script) { print(paste0(&quot;run_script is &quot;, run_script)) } ## [1] &quot;run_script is 1&quot; Code # FALSE run_script = FALSE if(run_script) { print(paste0(&quot;run_script is &quot;, run_script)) } run_script = F if(run_script) { print(paste0(&quot;run_script is &quot;, run_script)) } run_script = 0 if(run_script) { print(paste0(&quot;run_script is &quot;, run_script)) } Above, we set the variables deliberately to demonstrate how they can be used. However, they don’t need to be deliberately set to be useful. Code a = 3 typeof(a) ## [1] &quot;double&quot; Code is.numeric(a) ## [1] TRUE Code typeof(is.numeric(a)) ## [1] &quot;logical&quot; Code if(is.numeric(a)){ print(paste0(&quot;The variable a (&quot;, a,&quot;) is numeric.&quot;)) } ## [1] &quot;The variable a (3) is numeric.&quot; Code a=&quot;3&quot; if(is.numeric(a)){ print(paste0(&quot;The variable a (&quot;, a,&quot;) is numeric. Continuing the analysis.&quot;)) } else { print(paste0(&quot;The variable a (&quot;, a,&quot;) is &quot;, typeof(a), &quot;. Not continuing the analysis.&quot;)) } ## [1] &quot;The variable a (3) is character. Not continuing the analysis.&quot; Data Structures Data types can be organised into structures. These are: vectors: A vector is a collection of data, such as c(1990, 1990, 1991, 1989) or c(“Rou”, “Chris”, “Rory”, “Rob”) matrix: A matrix is data organised into rows and columns. Data in a matrix is only of one data type. data frames: A data frame is similar to a matrix, but can contain different data types. lists: A list is dynamic and can hold all different types of data structures and data types. Code yr &lt;- c(1990, 1990, 1991, 1989) name &lt;- c(&quot;Rou&quot;, &quot;Chris&quot;, &quot;Rory&quot;, &quot;Rob&quot;) rating &lt;- c(4,4,4,5) df &lt;- data.frame(year = yr, names = name, ratings = rating) df ## year names ratings ## 1 1990 Rou 4 ## 2 1990 Chris 4 ## 3 1991 Rory 4 ## 4 1989 Rob 5 Code dim(df) ## [1] 4 3 We can see this dataframe is 4 rows tall and 3 columns wide. We can access information in a dataframe using: df[row, col] Code df[1,1] ## [1] 1990 With data frames, we can also use $ to query a specific column. Code df$names ## [1] &quot;Rou&quot; &quot;Chris&quot; &quot;Rory&quot; &quot;Rob&quot; More examples: Code # show all rows in certain columns df[,1] ## [1] 1990 1990 1991 1989 Code df[,&quot;names&quot;] ## [1] &quot;Rou&quot; &quot;Chris&quot; &quot;Rory&quot; &quot;Rob&quot; Code # show all columns in one row df[1,] ## year names ratings ## 1 1990 Rou 4 Code # show select columns by providing a vector of specific indices df[,c(1,3)] ## year ratings ## 1 1990 4 ## 2 1990 4 ## 3 1991 4 ## 4 1989 5 Code # provide a range of indices quickly using colon between numbers. e.g. 1 to 2 df[,c(1:2)] ## year names ## 1 1990 Rou ## 2 1990 Chris ## 3 1991 Rory ## 4 1989 Rob Code # instead of using indices to pull information, we can use logic df[c(T,T,F,T),] ## year names ratings ## 1 1990 Rou 4 ## 2 1990 Chris 4 ## 4 1989 Rob 5 We can do a lot with a data frame if we combine everything we know about data types and structures Code # store a row or column as a new object patient_1 = df[1,] patient_1 ## year names ratings ## 1 1990 Rou 4 Code # return a logical vector based on a query df$names == &quot;Rou&quot; ## [1] TRUE FALSE FALSE FALSE Code # and add this to a new column df$is_rou &lt;- df$names == &quot;Rou&quot; df ## year names ratings is_rou ## 1 1990 Rou 4 TRUE ## 2 1990 Chris 4 FALSE ## 3 1991 Rory 4 FALSE ## 4 1989 Rob 5 FALSE Code # With a large dataframe, we might not know the specific indices we want to see or store, # so we could cut a dataframe or pull information based on certain logic df[df$names==&quot;Rou&quot;,] ## year names ratings is_rou ## 1 1990 Rou 4 TRUE Code df[df$ratings&lt;5,] ## year names ratings is_rou ## 1 1990 Rou 4 TRUE ## 2 1990 Chris 4 FALSE ## 3 1991 Rory 4 FALSE When working with enormous data structures, like single cell sequencing or proteomics data, knowing how to query your data frame or matrix will be very useful! Finally, we can make a list out of all of these different data types and structures, Code list &lt;- list(&quot;number&quot; = 1, &quot;string&quot; = &quot;string&quot;, &quot;logical&quot; = TRUE, &quot;vector&quot; = name, &quot;dataframe&quot; = df) list ## $number ## [1] 1 ## ## $string ## [1] &quot;string&quot; ## ## $logical ## [1] TRUE ## ## $vector ## [1] &quot;Rou&quot; &quot;Chris&quot; &quot;Rory&quot; &quot;Rob&quot; ## ## $dataframe ## year names ratings is_rou ## 1 1990 Rou 4 TRUE ## 2 1990 Chris 4 FALSE ## 3 1991 Rory 4 FALSE ## 4 1989 Rob 5 FALSE Ways to query your list Code list[[1]] ## [1] 1 Code list[[&quot;vector&quot;]] ## [1] &quot;Rou&quot; &quot;Chris&quot; &quot;Rory&quot; &quot;Rob&quot; Code list$string ## [1] &quot;string&quot; Importing and saving files in R Most file types can be read into R. If you’re not working with xlsx or csv, you might be working with tsv, txt, h5ad, or xml. Some are easier than others, and you’ll learn them as you go. Another file type is RDS which is R Data Serialization which is the easiest and most efficient way to read and write data once you’ve got it in R. RDS is more efficient than csv because saving and writing a csv is not as standard as you think. For example, a column name might change, rownames don’t stick unless directly specified when reading it back in. On the other hand, saveRDS() &amp; readRDS() requires no extra information. Your data will be identical when read back in. Most commonly, you’ll use data &lt;- read.csv() or data &lt;- readRDS(). To read in excel files, you’ll need to install a package (try the packages xlsx for read.xlsx(), or readxl for read_excel() - I can’t recall why, but sometimes one of these won’t work). Throughout these tutorials, you’ll use read.csv() to read in the example data we downloaded in Chapter 1. We’ll then finish each tutorial with saveRDS() and begin the next tutorial with readRDS(). This is a nice and organised way that you may use yourself when analysing data. This is effectively having stop and start points. Next chapter → "],["chapter-4-data-manipulation-with-tidyverse.html", "Chapter 4: Data Manipulation with tidyverse Why use tidyverse Filtering rows and columns Adding a column using mutate() group_by() and summarize() Pivot", " Chapter 4: Data Manipulation with tidyverse Goals: Introduce tidyverse for filtering, mutating, summarizing and pivoting data.   • Filtering rows (filter()), selecting columns (select()).   • Adding new columns (mutate()).   • Grouping and summarizing (group_by() + summarize()).   • Pivot longer and Pivot wider Read time: 10 Minutes Why use tidyverse If you wanted to just analyse a portion of your data, you could just subset the data frame. Code abdo &lt;- data[data$tissue == &quot;Abdomen&quot;,] # select only the rows where tissue contains Abdomen mean(abdo$CCR5_MFI) ## [1] 4729.088 Code abdo_epi &lt;- abdo[abdo$layer == &quot;Epithelium&quot;,] abdo_um &lt;- abdo[abdo$layer == &quot;Underlying&quot;,] mean(abdo_epi$CCR5_MFI) ## [1] 5462.761 Code mean(abdo_um$CCR5_MFI) ## [1] 3995.416 However, you might have already noticed that your environment is filling up with objects and variables that we keep assigning. With more complicated data this can get pretty annoying. We can remove things from the environment using rm(abdo, abdo_epi, abdo_um). We could instead write long conditionals within the square brackets. Code mean(data[data$tissue == &quot;Abdomen&quot; &amp; data$layer == &quot;Epithelium&quot;, &quot;CCR5_MFI&quot;]) ## [1] 5462.761 Code mean(data[data$tissue == &quot;Abdomen&quot; &amp; data$layer == &quot;Underlying&quot;, &quot;CCR5_MFI&quot;]) ## [1] 3995.416 However, you’ll find that this gets very long and confusing and annoying as you incorporate these into other functions, like ggplot. This is where dplyr becomes advantageous. dplyr allows us to manipulate an object without changing it permanently, using very efficient functions and a concept called pipes. dplyr is a package within the tidyverse ecosystem, which contains dplyr, tidyr, ggplot2, tibble, stringr, and others. So, we can install and load tidyverse for this chapter. Filtering rows and columns Pipes (%&gt;%) are an important concept and effectively stand for “using this”. From the example above, we could use dplyr instead, without assigning any new vairables, in a nice and tidy and follwable layout. When spoken, it might read like… Code data %&gt;% # using this object, I want to... filter(tissue == &quot;Abdomen&quot;) %&gt;% # then &quot;using this&quot; new filtered object filter(layer == &quot;Epithelium&quot;) %&gt;% select(CCR5_MFI) %&gt;% # using this object, select CCR5_MFI column unlist() %&gt;% # unlist to make it a vector mean() # and get the mean ## [1] 5462.761 Now, this seems like a lot for determining one value, but we’ll see what group_by() and summarize() do shortly, which demonstrate why you might want to learn dplyr asap. Adding a column using mutate() Similarly, in previous chapters, we have added columns to the data for ease of use. For example: Code # assign a new column data$percent_CD4 &lt;- 100*data$CD4/data$CD3 # then use dplyr to determine the mean value of Abdomen Epithelium data %&gt;% filter(tissue == &quot;Abdomen&quot;) %&gt;% filter(layer == &quot;Epithelium&quot;) %&gt;% select(percent_CD4) %&gt;% unlist() %&gt;% mean() ## [1] 43.09003 However, there might be hundreds of extra columns I want to make. And that means making 100 unique and descriptive column names, that then just gets more and more confusing as you add to the data. So, we can use mutate() instead, so that we don’t have to alter our original data. Code data %&gt;% mutate(percent_CD4 = 100*CD4/CD3)%&gt;% # Add a new column filter(tissue == &quot;Abdomen&quot;) %&gt;% filter(layer == &quot;Epithelium&quot;) %&gt;% select(percent_CD4) %&gt;% unlist() %&gt;% mean() %&gt;% round(2) ## [1] 43.09 group_by() and summarize() Here we’ve been writing 8 lines of code to get the mean values of one tissue type, which is useful if you wanted to do something with that exact single value. Alternatively, we can also use group_by() or summarize() to get values across multiple variables. Code data %&gt;% mutate(percent_CD4 = 100*CD4/CD3) %&gt;% group_by(tissue, layer) %&gt;% # almost like &#39;treat the data like n-data frames per combinations of tissue and layer summarize(mean_percent_CD4 = mean(percent_CD4)) # summarise in a new table ## `summarise()` has grouped output by &#39;tissue&#39;. You can override using the `.groups` argument. ## # A tibble: 6 × 3 ## # Groups: tissue [3] ## tissue layer mean_percent_CD4 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Abdomen Epithelium 43.1 ## 2 Abdomen Underlying 36.5 ## 3 Labia Epithelium 28.8 ## 4 Labia Underlying 65.9 ## 5 Vagina Epithelium 26.0 ## 6 Vagina Underlying 52.5 Pivot Packages and functions, e.g. ggplot, will sometimes require that data is organised in the correct way. pivot_longer() and pivot_wider() can be effective tools for rearranging your data to suit. Here we’ll just use a short subset of the data to easily visualise what is happening. Code data2 &lt;-data[c(1:10,25:34, 41:50),colnames(data) %in% c(&quot;donor&quot;, &quot;tissue&quot;, &quot;layer&quot;, &#39;group&#39;, &quot;CD3&quot;, &quot;CD4&quot;, &quot;CD8&quot;)] Currently, the data is in what we might consider wide format. We have one row per tissue layer and columns for our CD3, CD4, CD8 cell counts. We’ll start by mutating extra columns to get the CD4 and Cd8 percentages and then making it long, so that we get one column called “percent” with CD4 and CD8 in a different single column called “subset”. This is a format then compatible with ggplot. Code data2 %&gt;% mutate(percent_CD4 = 100*CD4/CD3, percent_CD8 = 100*CD8/CD3) %&gt;% pivot_longer(cols = c(percent_CD4, percent_CD8), #which columns to choose for elongating names_to = &quot;subset&quot;, # name of new column containing names values_to = &quot;percent&quot;) %&gt;% # name of new column containing values print() ## # A tibble: 60 × 9 ## donor tissue layer group CD3 CD8 CD4 subset percent ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Donor1 Abdomen Epithelium A_E 4460 2205 2184 percent_CD4 49.0 ## 2 Donor1 Abdomen Epithelium A_E 4460 2205 2184 percent_CD8 49.4 ## 3 Donor1 Abdomen Underlying A_UM 15295 7960 5529 percent_CD4 36.1 ## 4 Donor1 Abdomen Underlying A_UM 15295 7960 5529 percent_CD8 52.0 ## 5 Donor2 Abdomen Epithelium A_E 49774 25149 25251 percent_CD4 50.7 ## 6 Donor2 Abdomen Epithelium A_E 49774 25149 25251 percent_CD8 50.5 ## 7 Donor2 Abdomen Underlying A_UM 68879 47729 33616 percent_CD4 48.8 ## 8 Donor2 Abdomen Underlying A_UM 68879 47729 33616 percent_CD8 69.3 ## 9 Donor3 Abdomen Epithelium A_E 208665 92410 84610 percent_CD4 40.5 ## 10 Donor3 Abdomen Epithelium A_E 208665 92410 84610 percent_CD8 44.3 ## # ℹ 50 more rows You’ll notice we have duplicate entries for CD3, CD8 and CD4, but our column subset has alternating percent_CD4/CD8 and the value for that donor is in the percent column. This can now be used in a boxlpot in ggplot. Code data2 %&gt;% mutate(percent_CD4 = 100*CD4/CD3, percent_CD8 = 100*CD8/CD3) %&gt;% pivot_longer(cols = c(percent_CD4, percent_CD8), names_to = &quot;subset&quot;, values_to = &quot;percent&quot;) %&gt;% ggplot(aes(x=group, y=percent, fill=subset)) + geom_boxplot(outliers=F)+theme_classic() Imaging having a dataframe tens of thousands long, and you were to pivot longer and then store this data. You can imagine how inefficient your analysis workflow would become in such circumstances. Ok. Lets say that we wanted to see if there was a correlation between the percent of CD4+ T cells in epithelium versus underlying mucosa. To do this, we calculate the percent of CD4, but we need an x and y vector to give to ggplot. Currently, the data object looks like a long version of what we want. So we can pivot wider to make our graph. Code data2 %&gt;% mutate(percent_CD4 = 100*CD4/CD3) %&gt;% select(-c(group, CD3,CD4,CD8))%&gt;% # using a - with select lets use remove, instead of select a given column. group_by(tissue)%&gt;% pivot_wider(names_from = layer, values_from = percent_CD4) %&gt;% ggplot(aes(x=Epithelium, y=Underlying, color=tissue))+ geom_point()+ stat_ellipse()+ theme_classic() Hopefully it is clear why tidyverse is a useful tool. The next two chapters will continue to build your skills up to generating a range of different figures using ggplot. Next chapter → "],["chapter-5-data-visualisation-with-ggplot2.html", "Chapter 5: Data Visualisation with ggplot2 Basics of ggplot2 Summary", " Chapter 5: Data Visualisation with ggplot2 Goals: Create and customize visualizations using ggplot2.   • Basics of ggplot2   • Make a scatterplot, boxplot and column graph   • Customise labels, themes, and colors. R is a powerful tool for visualisation. Base R has its own graphing functions, but it’s. honestly a bit too simple and ugly for publication. ggplot2 is perhaps the most commonly used package. A more detailed resource can be found here. ggplot will be split across two chapters. The first will be the fundamentals for making figures, and the next chapter will have notes on detailed customisations. Read time: 20 Minutes Basics of ggplot2 ggplot2 is simply an expansive toolbox of graphics and functions that you may combine in infinitely unique ways to create figures for your specific needs and liking. The design of a ggplot graphic is that it is built in layers: Start with the raw input data: which object will you use? Which columns will be on the x, y, will be grouped, will be used for colours? Next, define how the data will be plotted - scatterplot, violin, column, boxplot, heatmap, density etc. Add layers. Add titles? Add a caption? Change the colour palette? Change the theme? data: The information you want to visualise. layer collection of geometic elements and statistical transformations aesthetic attributes: color, shape, size geometric objects: points, lines, bars (geom for short) statistical transformation: summary of the data (e.g. binning in a histogram) (stat for short) mapping: description of how the variables are mapped to aesthetic attributes facet: how to break up and display subsets of data theme: the finer points of display, like font size and background colour Example Question What is the relationship between CCR5 and HLA-DR percentages in human tissues? Scatterplot Using this example we’ll look at how the percentage of CCR5 and HLA-DR are correlated in this dataset. Code setwd(&quot;~/Desktop/analysis-user-group/&quot;) data &lt;- read.csv(&quot;~/Desktop/analysis-user-group/synthetic_data.csv&quot;) Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes(x = percent_CCR5, y = percent_HLADR))+ geom_point() You don’t need to use pipes for ggplot: This will also work: Code data &lt;- data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) ggplot(data, aes(x = percent_CCR5, y = percent_HLADR))+ geom_point() Lets start with a few aesthetic things. I’ll build these sequentially and point out what is changing each time. Change the titles and axes: Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes(x = percent_CCR5, y = percent_HLADR))+ geom_point() + ggtitle(&quot;Add a title using ggtitle()&quot;) Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes(x = percent_CCR5, y = percent_HLADR))+ geom_point() + ggtitle(&quot;Change the axes with xlab() and ylab()&quot;)+ xlab(&quot;CCR5 %&quot;)+ylab(&quot;HLA-DR %&quot;) Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes(x = percent_CCR5, y = percent_HLADR))+ geom_point() + labs(title = &quot;Or use `labs()` to change all at once&quot;, x= &quot;CCR5 %&quot;, y= &quot;HLA-DR %&quot;) Change the overall layout: Use theme_ to test out different styles. Here are my three most commonly used. Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes(x = percent_CCR5, y = percent_HLADR))+ geom_point() + labs(title = &quot;theme_classic()&quot;, x= &quot;CCR5 %&quot;, y= &quot;HLA-DR %&quot;)+ theme_classic() Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes(x = percent_CCR5, y = percent_HLADR))+ geom_point() + labs(title = &quot;theme_minimal())&quot;, x= &quot;CCR5 %&quot;, y= &quot;HLA-DR %&quot;)+ theme_minimal() Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes(x = percent_CCR5, y = percent_HLADR))+ geom_point() + labs(title = &quot;theme_bw()&quot;, x= &quot;CCR5 %&quot;, y= &quot;HLA-DR %&quot;)+ theme_bw() Adjust the aesthetic attributes (categorical): Changing the aesthetic will let us pull more information from the simple black dots Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes( x = percent_CCR5, y = percent_HLADR, color = tissue ))+ geom_point() + labs(title = &quot;Color by tissue&quot;, x= &quot;CCR5 %&quot;, y= &quot;HLA-DR %&quot;)+ theme_classic() Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes( x = percent_CCR5, y = percent_HLADR, color = tissue ))+ geom_point() + labs(title = &quot;Color by layer&quot;, x= &quot;CCR5 %&quot;, y= &quot;HLA-DR %&quot;)+ theme_classic() Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes( x = percent_CCR5, y = percent_HLADR, color = paste0(tissue, &quot;_&quot;, layer) ))+ geom_point() + labs(title = &quot;Color by tissue &amp; layer&quot;, x= &quot;CCR5 %&quot;, y= &quot;HLA-DR %&quot;)+ theme_classic() Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes( x = percent_CCR5, y = percent_HLADR, color = tissue, shape = layer ))+ geom_point() + labs(title = &quot;Color by tissue &amp; shape by layer&quot;, x= &quot;CCR5 %&quot;, y= &quot;HLA-DR %&quot;)+ theme_classic() Adjust the aesthetic attributes (continuous): We could add a third dimension here. X and Y are the percentage values, but what if we coloured the points by a third continuous value? Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes( x = percent_CCR5, y = percent_HLADR, color = CCR5_MFI ))+ geom_point() + labs(title = &quot;Color by CCR5 MFI&quot;, x= &quot;CCR5 %&quot;, y= &quot;HLA-DR %&quot;)+ theme_classic() Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4, percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes( x = percent_CCR5, y = percent_HLADR, color = log(CCR5_MFI) ))+ geom_point() + labs(title = &quot;Color by log(CCR5 MFI)&quot;, x= &quot;CCR5 %&quot;, y= &quot;HLA-DR %&quot;)+ theme_classic() Example Question Which tissues are enriched for CCR5? Boxplot Boxplot vs Violin: Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% ggplot(aes( x = group, y = percent_CCR5 ))+ geom_boxplot() + labs(title = &quot;geom_boxplot()&quot;, y= &quot;CCR5 %&quot;, x= &quot;Tissue x Layer&quot;)+ theme_classic() Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% ggplot(aes( x = group, y = percent_CCR5 ))+ geom_violin() + labs(title = &quot;geom_violin()&quot;, y= &quot;CCR5 %&quot;, x= &quot;Tissue x Layer&quot;)+ theme_classic() Combining layers - boxplot &amp; points: Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% ggplot(aes( x = group, y = percent_CCR5 ))+ geom_boxplot() + geom_point()+ labs(title = &quot;geom_boxplot() AND geom_point()&quot;, y= &quot;CCR5 %&quot;, x= &quot;Tissue x Layer&quot;)+ theme_classic() Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% ggplot(aes( x = group, y = percent_CCR5 ))+ geom_boxplot() + geom_jitter()+ labs(title = &quot;geom_boxplot() AND geom_jitter()&quot;, y= &quot;CCR5 %&quot;, x= &quot;Tissue x Layer&quot;)+ theme_classic() Code # The default jitter is width = 0.5 - we can reduce this data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% ggplot(aes( x = group, y = percent_CCR5 ))+ geom_boxplot() + geom_jitter(width=0.1)+ labs(title = &quot;geom_boxplot() AND geom_jitter(width=0.1)&quot;, y= &quot;CCR5 %&quot;, x= &quot;Tissue x Layer&quot;)+ theme_classic() Adjusting the aestheticss: When you’re combining layers, like boxplot and point, you might want to change the aesthetic to each layer individually. So instead of changing the aes at the start, we can add aes inside the geom’s. Code # The default jitter is width = 0.5 - we can reduce this data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% ggplot(aes( x = group, y = percent_CCR5 ))+ geom_boxplot(aes(fill = group)) + geom_jitter(width=0.1, aes(color=age))+ labs(title = &quot;geom_boxplot(aes(fill=group))+geom_jitter(aes(color=age))&quot;, y= &quot;CCR5 %&quot;, x= &quot;Tissue x Layer&quot;)+ theme_classic() Example Question What is the ratio of CD4:CD8 per tissue and layer? Column/bar graph Column/bar graphs are useful for summary graphs and/or statistical transformations (such as counts or histograms). Column graph: Code data %&gt;% mutate(ratio = log(CD4/CD8)) %&gt;% group_by(group)%&gt;% summarize(meanratio = mean(ratio))%&gt;% mutate(`Predominant Subset` = ifelse(meanratio&lt;0, &quot;CD8&quot;, &quot;CD4&quot;))%&gt;% ggplot(aes(x=group, y=meanratio, fill=`Predominant Subset`))+ geom_col()+ theme_bw() Example of statistical transformations (Histogram/Bar graph): Code data %&gt;% mutate(percent_CD4 = 100*CD4/CD3, percent_CD8 = 100*CD8/CD3) %&gt;% ggplot(aes(x=percent_CD4))+ geom_histogram()+ theme_bw()+ ggtitle(&quot;Histogram example&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Code # change the bin width to add more resolution data %&gt;% mutate(percent_CD4 = 100*CD4/CD3, percent_CD8 = 100*CD8/CD3) %&gt;% ggplot(aes(x=percent_CD4))+ geom_histogram(binwidth = .5)+ theme_bw()+ ggtitle(&quot;Histogram example&quot;) Code data %&gt;% mutate(predominant = ifelse(CD4&gt;CD8, &quot;CD4&quot;, &quot;CD8&quot;)) %&gt;% ggplot(aes(x=predominant))+ geom_bar()+ theme_bw()+ ggtitle(&quot;Bar graph example: Number of samples that are predominantly CD4 or CD8&quot;) Summary With these simple examples, you should have an idea of how to make and customise ggplots for your data. The next chapter will build upon these, such as changing the theme elements, customising the colours, combining and then saving your plots. Next chapter → "],["chapter-6-data-visualisation-with-ggplot2-2.html", "Chapter 6: Data Visualisation with ggplot2 2 Adjusting theme elements Annotating the plot facet_wrap() and Group Saving plots Some final hints", " Chapter 6: Data Visualisation with ggplot2 2 Goals: Learn additional visualisation techniques.   • Adjusting theme elements   • Annotating the plots   • facet_wrap() and grid_plot()   • Savings plots Read time: 15 Minutes Adjusting theme elements Everything in ggplot can be adjusted. Lets just go through a few of them to show you how its done, and you can explore them as you go. Theme elements: Code data %&gt;% ggplot(aes(CD28, age, color = log(CCR5_MFI))) + geom_point()+ theme_classic()+ theme(axis.text = element_text(size=10), axis.title = element_text(size=12), legend.position = &quot;inside&quot;, legend.justification = c(.99,.99)) Changing the scale: Code data %&gt;% ggplot(aes(CD28, age)) + geom_point()+ theme_bw()+ ylim(0,100) Changing the colours manually: Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% ggplot(aes( x = group, y = percent_CCR5, fill = group ))+ geom_boxplot(width=0.5) + geom_jitter(width=0.1, alpha=0.2)+ labs( y= &quot;CCR5 %&quot;, x= &quot;Tissue x Layer&quot;)+ scale_fill_manual(values = c(&quot;blue&quot;, &quot;blue4&quot;, &quot;red&quot;, &quot;red4&quot;, &quot;green&quot;, &quot;green4&quot;)) Code theme_classic() ## List of 136 ## $ line :List of 6 ## ..$ colour : chr &quot;black&quot; ## ..$ linewidth : num 0.5 ## ..$ linetype : num 1 ## ..$ lineend : chr &quot;butt&quot; ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ rect :List of 5 ## ..$ fill : chr &quot;white&quot; ## ..$ colour : chr &quot;black&quot; ## ..$ linewidth : num 0.5 ## ..$ linetype : num 1 ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_rect&quot; &quot;element&quot; ## $ text :List of 11 ## ..$ family : chr &quot;&quot; ## ..$ face : chr &quot;plain&quot; ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 11 ## ..$ hjust : num 0.5 ## ..$ vjust : num 0.5 ## ..$ angle : num 0 ## ..$ lineheight : num 0.9 ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ title : NULL ## $ aspect.ratio : NULL ## $ axis.title : NULL ## $ axis.title.x :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 2.75points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.x.top :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 2.75points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.x.bottom : NULL ## $ axis.title.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : num 90 ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.75points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.y.left : NULL ## $ axis.title.y.right :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : num -90 ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 2.75points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : chr &quot;grey30&quot; ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 2.2points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x.top :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 2.2points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x.bottom : NULL ## $ axis.text.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 1 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.2points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.y.left : NULL ## $ axis.text.y.right :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 2.2points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.theta : NULL ## $ axis.text.r :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0.5 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.2points 0points 2.2points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.ticks :List of 6 ## ..$ colour : chr &quot;grey20&quot; ## ..$ linewidth : NULL ## ..$ linetype : NULL ## ..$ lineend : NULL ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ axis.ticks.x : NULL ## $ axis.ticks.x.top : NULL ## $ axis.ticks.x.bottom : NULL ## $ axis.ticks.y : NULL ## $ axis.ticks.y.left : NULL ## $ axis.ticks.y.right : NULL ## $ axis.ticks.theta : NULL ## $ axis.ticks.r : NULL ## $ axis.minor.ticks.x.top : NULL ## $ axis.minor.ticks.x.bottom : NULL ## $ axis.minor.ticks.y.left : NULL ## $ axis.minor.ticks.y.right : NULL ## $ axis.minor.ticks.theta : NULL ## $ axis.minor.ticks.r : NULL ## $ axis.ticks.length : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ axis.ticks.length.x : NULL ## $ axis.ticks.length.x.top : NULL ## $ axis.ticks.length.x.bottom : NULL ## $ axis.ticks.length.y : NULL ## $ axis.ticks.length.y.left : NULL ## $ axis.ticks.length.y.right : NULL ## $ axis.ticks.length.theta : NULL ## $ axis.ticks.length.r : NULL ## $ axis.minor.ticks.length : &#39;rel&#39; num 0.75 ## $ axis.minor.ticks.length.x : NULL ## $ axis.minor.ticks.length.x.top : NULL ## $ axis.minor.ticks.length.x.bottom: NULL ## $ axis.minor.ticks.length.y : NULL ## $ axis.minor.ticks.length.y.left : NULL ## $ axis.minor.ticks.length.y.right : NULL ## $ axis.minor.ticks.length.theta : NULL ## $ axis.minor.ticks.length.r : NULL ## $ axis.line :List of 6 ## ..$ colour : chr &quot;black&quot; ## ..$ linewidth : &#39;rel&#39; num 1 ## ..$ linetype : NULL ## ..$ lineend : NULL ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ axis.line.x : NULL ## $ axis.line.x.top : NULL ## $ axis.line.x.bottom : NULL ## $ axis.line.y : NULL ## $ axis.line.y.left : NULL ## $ axis.line.y.right : NULL ## $ axis.line.theta : NULL ## $ axis.line.r : NULL ## $ legend.background :List of 5 ## ..$ fill : NULL ## ..$ colour : logi NA ## ..$ linewidth : NULL ## ..$ linetype : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_rect&quot; &quot;element&quot; ## $ legend.margin : &#39;margin&#39; num [1:4] 5.5points 5.5points 5.5points 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.spacing : &#39;simpleUnit&#39; num 11points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.spacing.x : NULL ## $ legend.spacing.y : NULL ## $ legend.key : NULL ## $ legend.key.size : &#39;simpleUnit&#39; num 1.2lines ## ..- attr(*, &quot;unit&quot;)= int 3 ## $ legend.key.height : NULL ## $ legend.key.width : NULL ## $ legend.key.spacing : &#39;simpleUnit&#39; num 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.key.spacing.x : NULL ## $ legend.key.spacing.y : NULL ## $ legend.frame : NULL ## $ legend.ticks : NULL ## $ legend.ticks.length : &#39;rel&#39; num 0.2 ## $ legend.axis.line : NULL ## $ legend.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ legend.text.position : NULL ## $ legend.title :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ legend.title.position : NULL ## $ legend.position : chr &quot;right&quot; ## $ legend.position.inside : NULL ## $ legend.direction : NULL ## $ legend.byrow : NULL ## $ legend.justification : chr &quot;center&quot; ## $ legend.justification.top : NULL ## $ legend.justification.bottom : NULL ## $ legend.justification.left : NULL ## $ legend.justification.right : NULL ## $ legend.justification.inside : NULL ## $ legend.location : NULL ## $ legend.box : NULL ## $ legend.box.just : NULL ## $ legend.box.margin : &#39;margin&#39; num [1:4] 0cm 0cm 0cm 0cm ## ..- attr(*, &quot;unit&quot;)= int 1 ## $ legend.box.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.box.spacing : &#39;simpleUnit&#39; num 11points ## ..- attr(*, &quot;unit&quot;)= int 8 ## [list output truncated] ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;theme&quot; &quot;gg&quot; ## - attr(*, &quot;complete&quot;)= logi TRUE ## - attr(*, &quot;validate&quot;)= logi TRUE Code data %&gt;% mutate(percent_HLADR = HLADR/CD4) %&gt;% ggplot(aes(x=CD28, y=age, color = percent_HLADR)) + geom_point()+ theme_bw()+ scale_color_gradient(high = &quot;#FF0000&quot;, low = &quot;#0000FF&quot;) # you can search hex numbers, or match colours to a powerpoint presentation. You can use digital colour meter on Mac Code data %&gt;% mutate(percent_HLADR = HLADR/CD4) %&gt;% ggplot(aes(x=CD28, y=age, color = percent_HLADR)) + geom_point()+ theme_bw()+ scale_color_viridis_c() # you can search through the options for these, as well as other scale_color and scale_fill options. Annotating the plot Horizontal and Vertical lines: I’ve added vertical lines (vlines), where you can specify the xintercepts to draw lines through. I also added “annotate” layers where you can specify “text” or “segment” layers, with x, y and label arguments for Code data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% ggplot(aes( x = group, y = percent_CCR5 ))+ geom_boxplot(width=0.5) + geom_jitter(width=0.1, alpha=0.2)+ labs( y= &quot;CCR5 %&quot;, x= &quot;Tissue x Layer&quot;)+ geom_vline(xintercept = c(2,4)+.5)+ annotate(&quot;segment&quot;, x=c(1:6)-.25, xend = c(1:6)+.25, y=data%&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% group_by(group) %&gt;% summarise(mean = mean(percent_CCR5)) %&gt;% select(mean) %&gt;% unlist(), color=&quot;red&quot;, size=2)+ annotate(&quot;text&quot;, x=1:6, y=data%&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% group_by(group) %&gt;% summarise(mean = mean(percent_CCR5)) %&gt;% select(mean) %&gt;% unlist(), label = data%&gt;% mutate(percent_CCR5 = 100*CCR5/CD4)%&gt;%group_by(group)%&gt;%summarise(mean=mean(percent_CCR5)) %&gt;% select(mean) %&gt;% unlist() %&gt;%round(), hjust = -2, color=&quot;red&quot;)+ theme_classic() facet_wrap() and Group Facet wrap lets you split your points by a categorical value Facet_wrap(): Code data %&gt;% mutate(percent_HLADR = 100*HLADR/CD4) %&gt;% ggplot(aes(x=CD28, y=age, color = percent_HLADR)) + geom_point(aes(shape=layer))+ theme_bw()+ scale_color_gradient(high = &quot;#FF0000&quot;, low = &quot;#0000FF&quot;)+ facet_wrap(~tissue) plot_grid(): Code library(cowplot) plot1 = data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% ggplot(aes( x = group, y = percent_CCR5 ))+ geom_boxplot(width=0.5) + geom_jitter(width=0.1, alpha=0.2)+ labs( y= &quot;CCR5 %&quot;, x= &quot;Tissue x Layer&quot;, title=&quot;Percent CCR5&quot;)+ geom_vline(xintercept = c(2,4)+.5)+ theme_classic() plot2 = data %&gt;% ggplot(aes( x = group, y = log(CCR5_MFI) ))+ geom_boxplot(width=0.5) + geom_jitter(width=0.1, alpha=0.2)+ labs( y= &quot;log(CCR5 MFI)&quot;, x= &quot;Tissue x Layer&quot;, title=&quot;CCR5 MFI&quot;)+ geom_vline(xintercept = c(2,4)+.5)+ theme_classic() plot_grid(plot1,plot2, nrow=2) #or change the rows. Add 50 plots if you want to adn specify how you arrange them by rows and/or columns Saving plots You can save plots in a few ways. pdf/png/tiff/jpeg(): Use ?png to get the specific options, but here is a simple example of generating a multipage pdf. You call the function to “open” the pdf, plot your figures, and then close the pdf using dev.off() Code pdf(file=&quot;CCR5_results.pdf&quot;, widht = 7, height=7) data %&gt;% mutate(percent_CCR5 = 100*CCR5/CD4) %&gt;% ggplot(aes( x = group, y = percent_CCR5 ))+ geom_boxplot(width=0.5) + geom_jitter(width=0.1, alpha=0.2)+ labs( y= &quot;CCR5 %&quot;, x= &quot;Tissue x Layer&quot;, title=&quot;Percent CCR5&quot;)+ geom_vline(xintercept = c(2,4)+.5)+ theme_classic() data %&gt;% ggplot(aes( x = group, y = log(CCR5_MFI) ))+ geom_boxplot(width=0.5) + geom_jitter(width=0.1, alpha=0.2)+ labs( y= &quot;log(CCR5 MFI)&quot;, x= &quot;Tissue x Layer&quot;, title=&quot;CCR5 MFI&quot;)+ geom_vline(xintercept = c(2,4)+.5)+ theme_classic() dev.off() ggsave: ggsave is quite simple and allows you to very easily control resolutions and size. Code ggsave(&quot;CCR5_percent.png&quot;, plot1, path = &quot;C:/1_Yc/r-analysis-user-group/plots&quot;, width = 7, height = 5, units = c(&#39;cm&#39;), dpi=300) Some final hints   • You can use show.legend=F inside geom layers to remove the legends   • You can store your initial plots as plot = ggplot(...)+geom_...     and then append layers onto this. Next Chapter → "],["chapter-7-statistical-analysis.html", "Chapter 7: Statistical Analysis Descriptive statistics", " Chapter 7: Statistical Analysis Goals: Apply simple statistic to the synthetic data.   • Descriptive statistics: mean, median, mode.   • Hypothesis testing (t-tests, ANOVA).   • Correlation and regression. Read time: 15 Minutes Descriptive statistics As the name suggests, in descriptive stats you can observe and describe the features of the exact data that you collected. You can quickly check some stats like mean, standard deviation (SD) and standard error (SE), median and 1st and 3rd quartile. Code SE &lt;- function(x){sd(x)/sqrt(length(x))} data %&gt;% mutate(percent_CD4 = 100*CD4/CD3)%&gt;% group_by(group) %&gt;% summarise(mean = mean(percent_CD4), sd = sd(percent_CD4), se = SE(percent_CD4), min = min(percent_CD4), quantile_25 = quantile(percent_CD4, probs = 0.25), median = median(percent_CD4), quantile_75 = quantile(percent_CD4, probs = 0.75), max = max(percent_CD4)) %&gt;% print() ## # A tibble: 6 × 9 ## group mean sd se min quantile_25 median quantile_75 max ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A_E 43.1 6.03 1.23 35.1 37.8 43.4 47.8 51.4 ## 2 A_UM 36.5 10.6 2.17 21.3 29.6 35.2 48.8 48.8 ## 3 L_E 28.8 5.75 1.29 21.4 24.7 28.1 31.3 41.8 ## 4 L_UM 65.9 5.09 1.14 54.1 63.2 66.3 70.1 72.3 ## 5 V_E 26.0 7.84 1.96 13.0 21.6 23.6 30.8 40.4 ## 6 V_UM 52.5 11.3 2.82 36.6 44.8 53.5 59.5 72.1 Code data %&gt;% mutate(percent_CD4 = 100*CD4/CD3)%&gt;% ggplot(aes(group, percent_CD4))+geom_boxplot()+ theme_classic() More content coming soon! "],["conclusions.html", "Conclusions", " Conclusions Content coming soon! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]

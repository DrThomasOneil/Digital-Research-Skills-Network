[["index.html", "Introduction to R and analytic Programming Welcome!", " Introduction to R and analytic Programming 2024-12-23 (Last update: 2025-01-07) Welcome! This is the sub-repository containing the tutorials and workshop notes for the introduction to R and analytic programming. A mock dataset will be provided, which is an example of summarised flow cytometry data, containing mock batches, patients, samples and measurements like percentage of subsets/MFIs. I generated this by randomising around the general trends that I’ve observed in my actual real flow cytometry data, and wanted to do this in order to provide actual data you might find yourself using along the way. In this book, you’ll find 11 sessions: Manual to programming tools: Transitioning from manual analysis to programming "],["introduction.html", "Introduction Transitioning from manual tools (e.g. Excel &amp; Prism) to programming-based workflows in R. Handling data - be specific! Directories Reproducibility and automation Summary", " Introduction Leaving behind manual analysis tools Goals: Introduce programming concepts and the mindset behind programmatic workflows.   • Transition from manual tools (e.g. Excel &amp; Prism) to programming-based workflows.   • Understand the concept of handling data using code.   • Learn to navigate directories and file paths programmatically.   • Emphasize reproducibility and structured workflows. You will not be writing code in this introduction. Here we start with trying to re-frame the way you think about and might approach analytic programming. I will try to speak through my own experiences and the anecdotal experiences of others who have successfully or failed to adopt programming as a skill. Read time: 15 Minutes Transitioning from manual tools (e.g. Excel &amp; Prism) to programming-based workflows in R. There are a lot of resources online that introduce programming to beginners. Here, instead, I will approach the concepts from a certain perspective: to introduce a wet-lab researcher, with a particular interest in applying wrangling visualisations of biomedical data, and who probably chronically uses a range of different apps and software for notetaking, calculations, stats, graphing and data management. Therefore, I aim to incorporate more than just how to do a t.test in R or how to analysis single cell RNA data, and include things like creating a lab notebook in R or sharing data with your PI or a collaborator. Note: If you still do not get it, don’t worry. It took me years to feel comfortable. I was fortunate enough to have a supervisor who gave me time to learn this. Keep up with it, find more resources and stick with a good community of users :) Consistency It’s important to know that consistency is key. You will not get better or more efficient at this unless you dedicate time, energy and brain power to learning it like any other language. There are times when I am using so much of one type of analysis, to the point that I can then rewrite the whole workflow automatically, and other times when I’m away for some time and cannot remember a single thing about that workflow. There is no easy way around it. I think that there will be some users who are in for a quick click-and-play script, and this is fine for performing one monotonous and unchanging task, like loading pre-processed single-cell RNAseq data just for purpose of visualisation. And honestly, if that is your intention, don’t waste your time here - there are better resources such as this and that. Active Learning Using the same analogy, (anecdotal) a good way to learn a new language is to actively apply your learning. For example, reading Spanish for Dummies and practicing the words in your head or in front of a mirror is not the same as reading a passage in Spanish and translating as you go, or practicing by talking to a friend. Reading a Coding for Dummies and trying to learn what the code does on paper is not productive and does not give you the same experience as writing and applying the code in RStudio. Fortunately, we don’t have to embarrass ourselves when we try the wrong combination of words in programming (the only people who will know your silliness is you and ChatGPT). Appropriate Learning Don’t get stuck in tutorial hell. It easy to get caught up in tutorials and never actually build anything. I recall buying a few courses on Udemy for R programming, because it just wasn’t clicking. The example data that was provided were basketball statistics sports data, and compounding savings finance data. It was impossible for me to translate those tutorials into what I was trying to achieve. You may have already read that I’ve generated a mock dataset that might mimic some Flow Cytometry data you’ve possibly already started to collect. Hopefully this will provide you with the context for how we’ll use R to analyse biomedical research data. Handling data - be specific! You need to very quickly forget about double-clicking and nice user-interfaces. Programming languages do not care about fancy interfaces; they are a toolbox that allow you to handle the data effectively and efficiently in ways that manual analysis fall short. So you need to start learning that you can’t click on the 3rd column and 5th row and change that value manually. You’ll need to… my_data[5,3] &lt;- new_value … and so you’ll need to learn quickly to be specific. However, as you get more comfortable, you will learn to generalise and automate a lot of your work. Instead of having to know that row 5 is the row you’re interested in, you can learn to query (spelled out in text) which column name contains the phrase \"CD45RA\" and which row name contains the phrase \"CD4\" You will also quickly learn that you need to format your data in a particular way before it gets to R. This is a long and tedious journey if you don’t actively learn from your formatting mistakes. For example, adding a space in a column name: Sample Number. When you export and reimport the data, the column name changes to Sample.Number, effectively ruining any previously written scripts that look for the Sample Number column. Before I was using R, I was copy and pasting a tonne to get my data in the right format for Prism! Hopefully you’ve had the same experience and want to prevent carpal tunnel!You will learn how to set up your spreadsheets for R, and forget Prism! I hope that as you navigate through these lessons, you try to amend your own spreadsheets so that your data becomes an R-friendly format. Directories Forget double clicking in File explorer &amp; Finder! You really need to remember that every time you open RStudio, you basically are looking at a text editor. You edit your code in a fancy-dancy text editor that colours words and numbers and run it in a number cruncher. However! If you have not pointed R to the right folder, you will: open the wrong data file you’ll immediately get the error cannot open compressed file 'data.csv', probable reason 'No such file or directory' If you’re not careful, you could change or delete a file you didn’t intend on touching. Could you imagine thinking that you’re editing row 5 and column 3 of your raw data, and not realising that you’re editing the tissue log! Directories are the most common errors! For both beginner and experienced users! What a directory looks like On a Mac: /Users/thomasoneil/Desktop/ On a PC: C:/ Set your directory at the beginning of each script/session For these sessions, I’ve created a folder on my desktop (mac) called analysis_user_group. We want to tell R where to look for files/folders and where to save our data/plots. setwd(&quot;~/Desktop/analysis_user_group&quot;) I can check my working directory using getwd() [1] \"~/Desktop/analysis_user_group\" Checking the files in your directory You can use list.files() to output the files and folders in that directory. Sometimes its just easier than typing out the whole file name! What . means You may need to know that . means this to the computer. For example list.files() is the same as list.files(\".\"). This is a bad example, but please remember what “.” means! It took me a long time to learn how to use it. For example, when you get into using dplyr which will drastically improve your programming life, knowing that . means “use this data” will change your life! Also list.files(\"..\")… What do you think this means? Try it when you get the chance! I’ve used it A LOT in making this website! Reproducibility and automation Now I don’t know about you, but I always struggled or felt anxious about detailing my analysis process. For example, how do I keep a log of changes I’ve made to a spreadsheet, such as changing or removing a column or data point, and have I changed the corresponding prism file? The amount of times I simply recreated a prism file just because I’d rearranged rows or columns or reanalysed one experiment in FlowJo, and the tediousness to figure out which column or row corresponded to the changes in all of my Prism tabs was not worth the hassle - just start again. You very rarely have to worry about this when you use R. In fact, if you have things set up nicely and precisely, its as simple as clicking one button and waiting for the output report. And this was something that appealed to me a lot when trying to motivate myself to migrate my analysis into R completely - every line of code is a specific instruction, and I know exactly what I had to do to the data in order to get the final result. I could then save that script with a date and if something changed, I could edit the script and save a new version with a new date. Furthermore! I could automate my experiment summaries. I could copy and paste that script, change the directory to a different acquisition and generate a new report with new data. You could then compile those experiment summaries into a markdown book similar to the one you are reading from now! This as an advantage of programming &gt; manual analysis would be enough on its own for me. It has undoubtedly made me more efficient in more than just the lab. I am much more detail-oriented and am able to communicate and share my data and processes more effectively using these skills. Summary Next Chapter → "],["chapter-1-getting-started-in-r-and-rstudio.html", "Chapter 1: Getting Started in R and RStudio R as a programming language Installing R and RStudio Navigating RStudio Projects Functions and Packages Hello World Exercise: Write your first second script Next Chapter", " Chapter 1: Getting Started in R and RStudio Your first steps… Goals: Set up R and RStudio, and get familiar with the interface.   • Understand what a programming language is.   • Know the difference between R, RStudio and python.   • Install R and RStudio.   • Exploring the interface – Console, Environment, Scripts.   • Installing and loading packages.   • Start your first project. By the end of this chapter, you’ll have installed R and RStudio, know how to navigate the RStudio UI and will know how to get started on a new project. To start with… Create a folder that you’ll work out of for this tutorial. For example, I have a folder analysis-user-group on my Desktop. Read time: 30 Minutes R as a programming language Simply: A programming language is a way to communicate with a computer. There are many languages, each with their own advantages and limitations. Some, such as SQL are used in database management, and others like R and python are used for analytic programming. R is designed specifically for statistical computing, data analysis and visualisation, and is considered one of the more user-friendly languages. Python is more of a general-purpose language used in data science, but also for web development, machine learning, and more. The language itself needs an interface for you to communicate with the computer. You can run R in Terminal (Mac) or Command Prompt (Windows) if you wanted to. You could store your scripts in Word and then copy and paste the lines into the commandline window. By now, you’ve heard of and seen RStudio. RStudio is what’s called an Integrated Development Environment (IDE) and makes working with R easier by organizing scripts, plots, and files. Installing R and RStudio Install R first. Go to CRAN, download the latest version of R and follow the prompts to install on your computer. You don’t need to do anything else with the R application! Next install RStudio. Go to the download page and follow the prompts to install on your computer. Once installed, open RStudio—it should automatically connect to your R installation. Navigating RStudio When you first open RStudio, you’ll see four main panels: Console (Bottom Left): This is essentially R. This is where you run the code. Environment (Top Right): Keeps track of your variables and data. Files/Plots/Packages (Bottom Right): Displays file directories, plots, help pages, and packages. Script Editor (Top Left): This is simply a text editor. This is where you would write and save your code. We will now start using R. You will be able to copy and paste code either directly into the console or into a new script, which you can save for later! Projects Projects in RStudio help organize your files and workflows. Create a Project: Go to File &gt; New Project. Select New Directory or link to an Existing Directory. Name your project and choose a folder location. Click Create Project. This sets up a workspace, saving all files and settings in one place. Use projects to keep analyses organized and reproducible. Functions and Packages It might feel like we’re moving too quickly through some of this. Don’t worry! The next two chapters will go into variables, data structures, functions and so on in more details using mock data. chunk: I’ll refer to the blocks of code you see throughout these lessons as a chunk. function: A function is a set of statements that are run at the same time. argument: An argument is a value/variable used in a function. package: A package is simply a collection of functions. R as a programming language is a set of basic functions. Some of these include: Arithmetic Code # sums 1+1 ## [1] 2 Code # subtraction 3-1 ## [1] 2 Code # multiplication 2*2 ## [1] 4 Code # division 40/pi ## [1] 12.7324 Code # exponents 2^2 ## [1] 4 Print and Paste Code # print a sentence print(&quot;This is a sentence.&quot;) ## [1] &quot;This is a sentence.&quot; Code # print two things &#39;pasted&#39; together print(paste(&quot;This is pi:&quot;, pi)) ## [1] &quot;This is pi: 3.14159265358979&quot; print() and paste() are examples of base R functions. DoHeatmap() and NormalizeData() are examples of functions that are derived from the Seurat package, used for scRNA seq analysis We might combine a series of these base R functions to create unique and specific output. For example, lets say I was constantly calculating cell percentages based off of cell numbers, and want to output a sentence summary. I might write it like this each time: Code num_cd45 = 45000 # number of CD45+ cells num_cd3 = 22000 # number of CD3+ cells per_cd3 = num_cd3/num_cd45 # calculate the fraction per_cd3 = per_cd3*100 # multiply by 100 to get a percentage per_cd3 = round(per_cd3, digits=2) # round the data off - here is an example of an argument - I can specify how many digits I want to include paste(&quot;There are &quot;, num_cd45, &quot; CD45+ cells and &quot;, num_cd3, &quot; CD3+ cells (&quot;, per_cd3, &quot;%)&quot;, sep = &quot;&quot;) # output the statement ## [1] &quot;There are 45000 CD45+ cells and 22000 CD3+ cells (48.89%)&quot; I would have several samples to calculate these for, and I don’t want to repeat these lines of code n times! We could write this into our own function (I will demonstrate how to do this in a future lesson) or hopefully someone has already done this. Lets pretend someone has already solved this issue. They’ve written the functions that we want and published them as package called simple_math. We can install this package and have access to the functions. Code # install the package install.packages(&quot;simple_math&quot;) A package only needs to installed once! You can manually search for your packages in RStudio in the Packages tab on the right. Or simply try to load it using… Code # load the package library(simple_math) Now that simple_math is loaded into our session, we can use the functions. This is what the function might look like: You will need to load packages into your R sessions everytime you restart R Code calculate_percent( parent = &quot;CD45&quot;, parent_num = 45000, subset = &quot;CD3&quot;, subset_num = 22000, digits = 1 ) ## [1] &quot;There are 45000 CD45+ cells and 22000 CD3+ cells (48.9%)&quot; This is a super reductionist explanation of functions and packages. Not only do functions and packages use base R functions, they themselves require functions from other packages. E.g. the Seurat package uses ggplot functions to generate graphs. As you perform more and more complex analyses, you will be installing and loading more and more packages necessary. There are some very common packages that you’ll likely use a lot such as: ggplot2 for visualisation dplyr for data manipulation Seurat for single cell analysis BiocManager for installing additonal bioinformatic packages … etc, etc Commenting code: You might have noticed that within the R chunks. Comments are ways of adding details and descriptions to your otherwise dry code. They are prefaced by a # The can be used in two ways: On their own line     # this is a comment     1+1     [1] 2 After code     1+1 # this will add 1 to 1     [1] 2 It is incredibly useful to comment your code. Some examples may be: You’ve written a script or custom function and want to remember what each line does. You’ve written a script or custom function and want to inform others what each line does. You’ve changed a script, but want to keep a copy of the older version - you could comment out each line. etc etc Hello World It’s customary that your first script is helloworld.R. So! Open a new script and save it in your analysis-user-group folder as helloworld.R. In this script add the line: Code print(&quot;Hello World&quot;) Click on this line in your script editor and press: Mac: Command-Enter Windows: Control-Enter This sends the line you’re on to the console and runs it. You’ll get the output [1] &quot;Hello World&quot; Congratulations. You wrote your first program.You’re a genius.Well done.You’re on your way to becoming a superstar programmer. Exercise: Write your first second script Practice:   Create an R script.          Send a line to the console. (See Hello World above)          Set your directory.          Install the ggplot2 package.          Load in sthe ggplot2 packages.          Download the dataset used for these tutorials into my directory.          Load in the dataset.          Inspect the data.          Create a simple plot of the data.          Save the plot in your directory. The data: In this exercise, and throughout these tutorials, we’ll be using flow cytometry data I synthesised representing mock cell frequencies and expressions of T cells dervied from human tissues (n=60). The data dictionary below provides a description for each column Data Dictionary: Column Description date Date of acquisition experiment Experiment number donor Donor Number age Age of patient tissue Tissue type: abdomen, labia, vagina layer Tissue layer: epithelium, underlying mucosa group Summarised sample group (e.g. A_E = abdomen epithelium) CD3 CD3+ cells CD8 CD8+ cells CD4 CD4+ cells HLADR CD4+HLADR+ cells CCR5 CD4+CCR5+ cells HLADR_MFI gMFI of HLADR on CD4+ cells CCR5_MFI gMFI of CCR5 on CD4+ cells CD28 CD4+CD28+ cells gMFI:geometric mean fluorescent intensity. Exercise: Write a script using the following instructions (run the lines as you write to see if its working for you) Open a new R script and save it to a folder of your choice. At the top of each of your scripts, you might want to add some comments about what the script is for. Set your working directory using setwd(). One way to quickly find the directory is to copy the folder and paste it into the script itself. Install ggplot2 Load the ggplot2 package Download the example data using: Code download.file(url=&quot;https://raw.githubusercontent.com/DrThomasOneil/analysis-user-group/refs/heads/main/docs/r-tutorial/assets/synthetic_data.csv&quot;, destfile=&quot;synthetic_data.csv&quot;) Don’t see the file? If you have set your directory properly, you will see a new file in your folder called synthetic_data.csv. Load the data into R using data &lt;- read.csv(\"synthetic_data,csv\") Inspect the data colnames() will show you what columns are present dim(data) will show you the dimensions of the data as rows x columns. head(data) will show you the first 6 rows of the data. Conversely, you could use tail(). summary(data) will give you detailed output of the data. Assign to a variable plot a graph of % CD4+ T cells in each group using the ggplot() function. Here you can copy and paste my code, as we don’t cover ggplot until Chapter 5 In Chapter 5 &amp; 6, we will learn how to use ggplot and how to make publication-worthy graphs Code plot = ggplot(data, aes(x=group, y=100*(CD4/CD3), color=tissue))+geom_boxplot() Output the plot by writing plot in the console. Save the plot to your directory using ggsave(). Use ?ggsave in the console to bring up the help menu for this function! Here you will find descriptions of the function, the arguments you can use and examples of it’s use. Solution Here is one possible solution. Did you comment your code? Code #* This is my first script #* I will set my directory, install my first package, load it in, and save a variable to my directory #* 20250107 # set your directory setwd(&quot;~/Desktop/analysis-user-group&quot;) #THIS WONT WORK FOR YOU - YOU&#39;LL NEED TO SET YOUR OWN DIRECTORY # uncomment and install the package once # install.packages(&quot;ggplot2&quot;) # load the package library(ggplot2) # download the example data download.file(url=&quot;https://raw.githubusercontent.com/DrThomasOneil/analysis-user-group/refs/heads/main/docs/r-tutorial/assets/synthetic_data.csv&quot;, destfile = &quot;synthetic_data.csv&quot;) # read in synthetic data data &lt;- read.csv(&quot;synthetic_data.csv&quot;) # inspect the data colnames(data) dim(data) head(data) summary(data) # create a simple plot of percentage of CD4+ cells per group plot &lt;- ggplot(data, aes(x=group, y=100*(CD4/CD3), color=tissue))+geom_boxplot() # output the plot plot # save plot ggsave(&quot;myfirstplot.png&quot;,plot = plot) You may have seen me use = and &lt;- interchangeably. That’s because they are. Next Chapter Congratulations! You’ve completed Chapter 1. You now have R and RStudio installed, have installed a package and started to write scripts. In the next two chapters, I will use this data to explain more about the fundamentals of R. Next Chapeer → "],["data-types-and-structures.html", "Data Types and Structures", " Data Types and Structures Content coming soon! "],["basic-programming.html", "Basic Programming", " Basic Programming Content coming soon! "],["data-manipulation-with-dplyr.html", "Data Manipulation with dplyr", " Data Manipulation with dplyr Content coming soon! "],["data-visualisation-with-ggplot2.html", "Data Visualisation with ggplot2", " Data Visualisation with ggplot2 Content coming soon! "],["advanced-data-visualisation-with-ggplot2.html", "Advanced Data Visualisation with ggplot2", " Advanced Data Visualisation with ggplot2 Content coming soon! "],["statistical-analysis.html", "Statistical Analysis", " Statistical Analysis Content coming soon! "],["reproducible-reports-with-rmarkdown.html", "Reproducible Reports with RMarkdown", " Reproducible Reports with RMarkdown Content coming soon! "],["mini-project---putting-it-all-together.html", "Mini Project - Putting it all together!", " Mini Project - Putting it all together! Content coming soon! "],["troubleshooting-and-workflow-design.html", "Troubleshooting and Workflow Design", " Troubleshooting and Workflow Design "],["conclusions.html", "Conclusions", " Conclusions Content coming soon! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
